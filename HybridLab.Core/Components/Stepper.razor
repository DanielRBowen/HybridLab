@using System.Collections.Generic

<CascadingValue Value="this">
    @if (Steps != null && Steps.Length > 0)
    {
        <div class="step-container">
            @CurrentFragment
            @if (Steps != null && Steps.Length > 1)
            {
                <div class="center-boarder">
                    <div class="inner-center">
                        <button @onclick="PreviousStep" class="@BackButtonClass" disabled="@(!HasPreviousStep)">Back</button>
                        <button @onclick="NextStep" class="@NextButtonClass" disabled="@(!HasNextStep)">Next</button>
                    </div>
                </div>
            }
        </div>
    }
</CascadingValue>

@code {
    [Parameter]
    public string[] Steps { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public string BackButtonClass { get; set; } = "btn btn-lg btn-secondary btn-prev";

    [Parameter]
    public string NextButtonClass { get; set; } = "btn btn-lg btn-primary btn-next";

    private int CurrentStepIndex { get; set; } = 0;

    public string CurrentStep => Steps[CurrentStepIndex];

    private bool HasPreviousStep => CurrentStepIndex > 0;

    private bool HasNextStep => CurrentStepIndex < Steps.Length - 1;

    private RenderFragment CurrentFragment => ChildContent;

    protected override void OnParametersSet()
    {
        //if (Steps == null || Steps.Length == 0)
        //{
        //    throw new InvalidOperationException("There must be one or more steps.");
        //}

        base.OnParametersSet();
    }

    private void NextStep()
    {
        if (HasNextStep)
        {
            CurrentStepIndex++;
            StateHasChanged();
        }
    }

    private void PreviousStep()
    {
        if (HasPreviousStep)
        {
            CurrentStepIndex--;
            StateHasChanged();
        }
    }
}