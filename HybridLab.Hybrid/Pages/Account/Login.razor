@page "/account/login"
@inject IJSRuntime JSRuntime
@inject HttpClient HttpClient
@inject IAccountClient AccountClient
@inject NavigationManager Navigation

<h3>Login</h3>

<div class="row">
    <div class="col-md-4">
        <section>
            <EditForm Model="@user" OnValidSubmit="HandleLogin">
                <ValidationSummary />

                <hr />
                <div asp-validation-summary="All" class="text-danger"></div>
                <div class="form-group">
                    <label>User Name</label>
                    <InputText class="form-control" @bind-Value="user.UserName" />
                    <ValidationMessage For="@(() => user.UserName)" />
                </div>
                <div class="form-group">
                    <label>Password</label>
                    <InputText class="form-control" type="password" @bind-Value="user.Password" />
                    <ValidationMessage For="@(() => user.Password)" />
                </div>

                @if (string.IsNullOrWhiteSpace(AccountClient.ServiceUrl))
                {
                    <div class="form-group">
                        <label>Service Url</label>
                        <InputText class="form-control" @bind-Value="user.ServiceUrl" />
                        <ValidationMessage For="@(() => user.ServiceUrl)" />
                    </div>
                }
               
                <div class="form-group">
                    <button type="submit" class="btn btn-primary">Log in</button>
                </div>
            </EditForm>
        </section>
    </div>
</div>

@code {
    UserLoginDto user = new UserLoginDto();

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(AccountClient.UserName) == false)
        {
            Navigation.NavigateTo("/");
        }

        if (string.IsNullOrEmpty(AccountClient.ServiceUrl) == false)
        {
            user.ServiceUrl = AccountClient.ServiceUrl;
        }

        await base.OnInitializedAsync();
    }

    async Task HandleLogin()
    {
        try
        {
            bool signedIn = await AccountClient.Login(user);

            if (signedIn)
            {
                Navigation.NavigateTo("/");
                await JSRuntime.InvokeVoidAsync("reloadClient");
            }
            else
            {
                // error message
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }
}